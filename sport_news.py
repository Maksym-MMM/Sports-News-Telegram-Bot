import threading
from email.mime import message
from hashlib import new
from http import client
from io import BufferedRandom
from operator import ne
from pstats import Stats
from unicodedata import category
import requests
from bs4 import BeautifulSoup
import telebot
import time
import sqlite3
from telebot import types
import threading
lock = threading.Lock()

on_off=True

with open('token.txt', 'r') as f:
    token = f.read().strip()

bot = telebot.TeleBot(token)

#—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
try:
    my_file = open("orders.db", "r+")
except BaseException:
    my_file = open("orders.db", "w+")

conn = sqlite3.connect('orders.db',check_same_thread=False)
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(
   user_id INT PRIMARY KEY,
   user_name TEXT,
   user_admin INT,
   football_news INT,
   MMA_news INT,
   biathlon_news INT,
   tenis_news INT,
   basketball_news INT,
   hockey_news INT,
   on_off TEXT);
""")
conn.commit()

#—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫
markup = types.InlineKeyboardMarkup(row_width=2)
all_bt = types.InlineKeyboardButton("üåê–í—Å—ñ –Ω–æ–≤–∏–Ω–∏üåê", callback_data='all_news')
football_bt = types.InlineKeyboardButton("‚öΩ–§—É—Ç–±–æ–ª‚öΩ", callback_data='football')
mma_bt = types.InlineKeyboardButton("ü•ä–ë–æ–∫—Åü•ä", callback_data='mma')
biathlon_bt = types.InlineKeyboardButton("üéø–ë—ñ–∞—Ç–ª–æ–Ωüéø", callback_data='biathlon')
tennis_bt = types.InlineKeyboardButton("üéæ–¢–µ–Ω—ñ—Åüéæ", callback_data='tennis')
basketball_bt = types.InlineKeyboardButton("üèÄ–ë–∞—Å–∫–µ—Ç–±–æ–ªüèÄ", callback_data='basketball')
hockey_bt = types.InlineKeyboardButton("üèí–•–æ–∫–µ–πüèí", callback_data='hockey')
markup.add(football_bt, mma_bt, biathlon_bt, tennis_bt, basketball_bt, hockey_bt, all_bt)


keyboard = types.ReplyKeyboardMarkup(row_width=2)
adds_bt = types.KeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É")
category_choose_bt = types.KeyboardButton("–í–∏–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é")
categoryse_bt = types.KeyboardButton("–ü—ñ–¥–∫–ª—é—á–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")
settings_bt = types.KeyboardButton("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
statistic_bt = types.KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
keyboard.add(category_choose_bt, categoryse_bt, settings_bt, statistic_bt, adds_bt)

setting_keys = types.ReplyKeyboardMarkup()
resume_bt = types.KeyboardButton("–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É")
stop_news_bt = types.KeyboardButton("–ó—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É")
setting_keys.add(resume_bt, stop_news_bt)

confirm_keys = types.ReplyKeyboardMarkup()
confirm_bt = types.KeyboardButton("–¢–∞–∫")
cancel_bt = types.KeyboardButton("–ù—ñ")
confirm_keys.add(confirm_bt, cancel_bt)

def data_insert(message):
    now_id=message.chat.id
    cur.execute(f"SELECT user_id FROM users WHERE user_id={now_id}")
    data=cur.fetchone()
    if data == None:
        user=(message.chat.id,message.from_user.username,0,0,0,0,0,0,0,"on")
        cur.execute("INSERT INTO users VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", user)
        conn.commit()
        
def save_image_from_url(image_url, file_path):
    try:
        response = requests.get(image_url)
        if response.status_code == 200:
            with open(file_path, 'wb') as file:
                file.write(response.content)
        else:
            print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: HTTP —Å—Ç–∞—Ç—É—Å {response.status_code}")
    except Exception as e:
        print(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")


#start
@bot.message_handler(commands=["start"])
def start(message, res=False):
    data_insert(message)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç. —è –±–æ—Ç –∑—ñ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–º–∏ –Ω–æ–≤–∏–Ω–∞–º–∏")
    bot.send_message(message.chat.id,"–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=markup)
 

#admin help
@bot.message_handler(commands=["admin_help"])
def admin_help(message, res=False):
    data_insert(message)
    cur.execute(f"SELECT * FROM users WHERE user_id={message.chat.id}")
    data=cur.fetchall()
    if data[0][2]==1:
        bot.send_message(message.chat.id, "/post_message - –ø–æ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —É—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–æ—Ç–∞\n")


#—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total_users="0"
new_users="0"


@bot.message_handler(commands=["post_message"])
def send_welcome(message):
    data_insert(message)
    cur.execute(f"SELECT * FROM users WHERE user_id={message.chat.id}")
    data=cur.fetchall()
    if data[0][2]==1:
        msg = bot.reply_to(message,"–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ—Å—Ç")
        bot.register_next_step_handler(msg,process_post)
        
def process_post(message):
    global post_txt
    post_txt=message.id
    global chat_id
    chat_id=message.chat.id
    msg = bot.reply_to(message,"–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –¢–∞–∫, —ñ–Ω–∞–∫—à–µ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ù—ñ", reply_markup=confirm_keys)
    bot.register_next_step_handler(msg,post_confirm)
    
def post_confirm(message):
    if message.text=="–¢–∞–∫":
        bot.send_message(message.chat.id, "–ü–æ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π", reply_markup=keyboard)
        cur.execute("SELECT * FROM users")
        data=cur.fetchall()
        for i in range(len(data)):
            bot.copy_message(data[i][0],chat_id,post_txt)
    else:
        bot.send_message(message.chat.id, "–ü–æ—Å—Ç –±—É–≤ —Å–∫–∞—Å–æ–≤–∞–Ω–∏–π", reply_markup=keyboard)


category_texts = {
    "football": "‚öΩÔ∏è–§—É—Ç–±–æ–ª‚öΩÔ∏è",
    "mma": "ü•ä–ë–æ–∫—Åü•ä",
    "biathlon": "üéø–ë—ñ–∞—Ç–ª–æ–Ωüéø",
    "tenis": "üéæ–¢–µ–Ω—ñ—Åüéæ",
    "basketball": "üèÄ–ë–∞—Å–∫–µ—Ç–±–æ–ªüèÄ",
    "hockey": "üèí–•–æ–∫–µ–πüèí"
}

@bot.callback_query_handler(func=lambda call: True)
def choose_url(call):
    u_id = call.from_user.id
    data = call.data
    cur.execute(f"SELECT user_id FROM users WHERE user_id={u_id}")
    data_check=cur.fetchone()
    if data_check == None:
        user=(call.from_user.id,call.from_user.username,0,0,0,0,0,0,0,"on")
        cur.execute("INSERT INTO users VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);", user)
        conn.commit()
    cur.execute(f"SELECT * FROM users WHERE user_id={u_id}")
    user_data = cur.fetchone()
    if data == "all_news":
        cur.execute(f"UPDATE users SET football_news=1, MMA_news=1, biathlon_news=1, tenis_news=1, basketball_news=1, hockey_news=1 WHERE user_id = {u_id}")
        conn.commit()
        bot.send_message(call.message.chat.id, "—É—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ", reply_markup=keyboard)
    elif data in ("football", "mma", "biathlon", "tenis", "basketball", "hockey"):
        category_index = {'football': 3, 'mma': 4, 'biathlon': 5, 'tenis': 6, 'basketball': 7, 'hockey': 8}[data]
        
        category_news = user_data[category_index]
        new_state = 1 if category_news == 0 else 0
        cur.execute(f"UPDATE users SET {data}_news = {new_state} WHERE user_id = {u_id}")
        conn.commit()

        category_text = category_texts[data]
        if new_state == 1:
            bot.send_message(call.message.chat.id, f"–≤–∏ –ø—ñ–¥–∫–ª—é—á–∏–ª–∏: {category_text}", reply_markup=keyboard)
        else:
            bot.send_message(call.message.chat.id, f"–≤–∏ –≤—ñ–¥–∫–ª—é—á–∏–ª–∏: {category_text}", reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def choose_url(m, res=False):
    if(m.text == "–ó–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É"):
        bot.send_message(m.chat.id,"—â–æ–± –∑–∞–º–æ–≤–∏—Ç–∏ —Ä–µ–∫–ª–∞–º—É –ø–∏—à—ñ—Ç—å https://t.me/Deonax")
    elif(m.text =="–í–∏–±—Ä–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é"):
        bot.send_message(m.chat.id,"–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=markup)
    elif(m.text =="–ü—ñ–¥–∫–ª—é—á–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"):
        u_id=m.chat.id
        data_insert(m)
        cur.execute(f"SELECT * FROM users WHERE user_id={u_id}")
        data=cur.fetchone()
        ct_text=""
        if data[3]==1:
            ct_text=ct_text+"‚öΩ–§—É—Ç–±–æ–ª‚öΩ\n"
        if data[4]==1:
            ct_text=ct_text+"ü•ä–ë–æ–∫—Åü•ä\n"
        if data[5]==1:
            ct_text=ct_text+"üéø–ë—ñ–∞—Ç–ª–æ–Ωüéø\n"
        if data[6]==1:
            ct_text=ct_text+"üéæ–¢–µ–Ω—ñ—Åüéæ\n"
        if data[7]==1:
            ct_text=ct_text+"üèÄ–ë–∞—Å–∫–µ—Ç–±–æ–ªüèÄ\n"
        if data[8]==1:
            ct_text=ct_text+"üèí–•–æ–∫–µ–πüèí\n"
        if ct_text:
            bot.send_message(u_id,ct_text,parse_mode="Markdown")
        else:
            bot.send_message(u_id,"–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",parse_mode="Markdown")
    elif(m.text =="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"):
        bot.send_message(m.chat.id,"–ù–∞–ª–∞—à—Ç—É–π—Ç–µ –±–æ—Ç–∞", reply_markup=setting_keys)    
        
    elif(m.text =="–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É"):
        u_id=m.chat.id
        data_insert(m)
        cur.execute(f"UPDATE users SET on_off = 'on' WHERE user_id = {u_id}")
        bot.send_message(m.chat.id,"–ù–æ–≤–∏–Ω–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω—ñ", reply_markup=keyboard)
        conn.commit()
        
    elif(m.text == "–ó—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑—Å–∏–ª–∫—É"):
        u_id=m.chat.id
        data_insert(m)
        cur.execute(f"UPDATE users SET on_off = 'off' WHERE user_id = {u_id}")
        bot.send_message(m.chat.id,"–ù–æ–≤–∏–Ω–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ", reply_markup=keyboard)
        conn.commit()
        
    elif(m.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"):
        cur.execute("SELECT COUNT(*) FROM users")
        users_count = cur.fetchone()[0]
        stats="–ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ -- "+str(users_count)
        bot.send_message(m.chat.id,stats)
    

def send_news(url, column_index):
    old_url = ""
    while True:
        try:
            time.sleep(5)
            response = requests.get(url)
            soup = BeautifulSoup(response.content, 'html.parser')
            headline = soup.find("div", {"class": "item team-news"})
            inf_url = headline.find("div", {"class": "item-title"}).find('a').get("href")
            if old_url != inf_url:
                response = requests.get(url)
                soup = BeautifulSoup(response.content, 'html.parser')
                headline = soup.find("div", {"class": "item team-news"})
                img_url = headline.find("div", {"class": "team-news-img"}).find("img").get("data-src")
                inf_url = headline.find("div", {"class": "item-title"}).find('a').get("href")
                title = headline.find("div", {"class": "item-title"}).find('a').get_text()
                txt =headline.find("p", {"class": "item-text"}).get_text()
                markup_url = types.InlineKeyboardMarkup()
                url_button = types.InlineKeyboardButton(text='–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ', url=inf_url)
                markup_url.add(url_button)
                news_txt = title + "\n" + txt
                image_url = img_url
                file_path = 'image.jpg'
                save_image_from_url(image_url, file_path)
                with open(file_path, 'rb') as file:
                    photo_content = file.read()
                with lock:
                    cur.execute("SELECT * FROM users")
                    data = cur.fetchall()
                    print(data)
                if data != "":
                    for i in range(len(data)):
                        if data[i][column_index] == 1:
                            if data[i][-1] == "on":
                                if old_url != inf_url:
                                    bot.send_photo(chat_id=data[i][0], photo=photo_content, caption=news_txt, reply_markup=markup_url)
                old_url = inf_url
        except Exception as e:
            print("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:", type(e).__name__)

def start_news_threads():
    urls = [
        ("https://sport.ua/uk/news/football", 1),
        ("https://sport.ua/uk/news/mma", 4),
        ("https://sport.ua/uk/news/biathlon", 5),
        ("https://sport.ua/uk/news/basketball", 7),
        ("https://sport.ua/uk/news/tennis", 6),
        ("https://sport.ua/uk/news/hockey", 8),
    ]

    threads = []
    
    bot_thread = threading.Thread(target=bot.polling)
    bot_thread.start()
    
    for url, column_index in urls:
        t = threading.Thread(target=send_news, args=(url, column_index))
        t.start()
        threads.append(t)
        time.sleep(5)

    for t in threads:
        t.join()
        time.sleep(5)
        

start_news_threads()
bot.polling()
